{"version":3,"sources":["components/Header/index.jsx","store/reducers/cases.js","components/Shared/Message.jsx","components/Home/component.jsx","components/Home/index.js","App.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","href","id","initialState","infected","deceased","recovered","tested","loading","casesReducer","state","type","payload","messageTypes","Message","message","title","Home","this","props","fetchCases","Component","connect","case","dispatch","a","fetch","method","headers","response","json","data","App","Fragment","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.876cfbb4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar is-fixed-top is-link\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"/\">\n                    Covid-19 Ph Counter\n                </a>\n            </div>\n\n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                \n            </div>\n        </nav>\n    );\n}\n\nexport default Header;","import fetch from 'node-fetch';\nconst url = 'https://api.apify.com/v2/key-value-stores/lFItbkoNDXKeSWBBA/records/LATEST?disableRedirect=true';\nconst ATTEMPT_FETCH_CASES = 'ATTEMPT_FETCH_CASES';\nconst SUCCEED_FETCH_CASES = 'SUCCEED_FETCH_CASES';\nconst FAILED_FETCH_CASES = 'FAILED_FETCH_CASES';\n\n\nexport const fetchCases = () => {\n    return async dispatch => {\n        dispatch({\n            type: ATTEMPT_FETCH_CASES,\n        });\n        const response = await fetch(url, {method: 'get', headers: {'Accept': 'application/json'}});\n        const data = await response.json();\n        dispatch({\n            type: SUCCEED_FETCH_CASES,\n            payload: data,\n        });\n    } \n}\n\n\n\nconst initialState = {\n    infected: 0,\n    deceased: 0,\n    recovered: 0,\n    tested: 0,\n    loading: false,\n}\n\nconst casesReducer = (state = initialState, {type, payload}) => {\n\n    switch(type) {\n        case ATTEMPT_FETCH_CASES: {\n            state = {\n                ...state,\n                loading: true,\n            }\n            break;\n        }\n        case FAILED_FETCH_CASES: {\n            state = {\n                ...state,\n                loading: false,\n            }\n            break;\n        }\n        case SUCCEED_FETCH_CASES: {\n            state = {\n                ...state,\n                infected: payload.infected,\n                tested: payload.tested,\n                recovered: payload.recovered,\n                deceased: payload.deceased\n            }\n            break;\n        }\n        default: {\n            return state;\n        }\n    }\n\n    return state;\n} \n\nexport default casesReducer;\n\n","import React from 'react';\n\nconst messageTypes = {\n    'warning': 'is-warning',\n    'danger': 'is-danger',\n    'success': 'is-success',\n    'info': 'is-info'\n}\n\n\nconst Message = ({message, type, title}) => {\n    return (\n        <article className={`message ${messageTypes[type]}`}>\n            <div className=\"message-header\">\n                <p>{title}</p>\n            </div>\n            <div className=\"message-body\">\n                <p className=\"align-center\">{message}</p>\n            </div>\n        </article>\n    )\n}\n\nexport default Message;","import React, {Component} from 'react';\nimport Message from '../Shared/Message'\n\nclass Home extends Component {\n\n    componentDidMount(){\n        this.props.fetchCases();\n    }\n\n    render() {\n        return (\n            <main className=\"main columns\">\n                <div className=\"column\">\n                    <Message type={'warning'} title=\"Confirmed Cases\" message={this.props.infected} />\n                </div>\n                <div className=\"column\">\n                    <Message type={'danger'} title=\"Deceased\" message={this.props.deceased} />\n                </div>\n                <div className=\"column\">\n                    <Message type={'success'} title=\"Recovered\" message={this.props.recovered} />\n                </div>\n                <div className=\"column\">\n                    <Message type={'info'} title=\"Tested\" message={this.props.tested} />\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default Home;","import {connect} from 'react-redux';\nimport {fetchCases} from '../../store/reducers/cases';\nimport Home from './component';\n\nconst mapState = (state) => {\n    return {\n        infected: state.case.infected,\n        deceased: state.case.deceased,\n        recovered: state.case.recovered,\n        tested: state.case.tested\n    }\n}\n\nconst mapDispatch = (dispatch) => {\n    return {\n        fetchCases: () => dispatch(fetchCases()),\n    }\n}\n\n\nexport default connect(mapState, mapDispatch)(Home)\n","import React from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport 'bulma/css/bulma.css';\nimport './theme.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Home />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport casesReducer from './cases';\n\nconst rootReducer = combineReducers({\n    case: casesReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n \nimport rootReducer from './reducers/index';\n\n\n\n//const persistedState = loadFromLocalStorage()\n//const sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst store =  createStore(\n    rootReducer,\n    //persistedState,\n    composeEnhancers(applyMiddleware(thunk)),\n);\n\n\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}